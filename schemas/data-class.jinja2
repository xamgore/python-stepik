# This file is generated
from common import required, readonly
from typing import List
from resources_list import ResourcesList

{% for model, struct in models.items() -%}
{% for class, path in struct['imports'].items() %}
from {{ path }} import {{ class }}
{% endfor %}


class {{ model | replace('Serializer', '') }}:
    def __init__(self, stepik, data):
        self.__stepik = stepik
        self.__data = data


    def __repr__(self):
        return f'{{ model | replace('Serializer', '') }}(id={self.id!r})'


{% for prop, at in struct['resources'].items() %}
    @property
    def {{ prop }}(self) -> Resources{{ at['new_type'] }}:
    {% if at['docstring'] %}
        """
        {{ at['docstring'] | indent(width=8) }}
        """
    {% endif %}
        return Resources{{ at['new_type'] }}({{ at['type'] }}, self.__stepik, self, '{{ at['from'] }}_ids')


{% endfor %}
{% for prop, at in struct['methods'].items() %}
    def {{ prop }}(self) -> {{ at['new_type'] }}:
    {% if at['docstring'] %}
        """
        {{ at['docstring'] | indent(width=8) }}
        """
    {% endif %}
        return {{ at['type'] }}(self.__stepik, self.__stepik._fetch_object('{{ at['type'] }}', self.{{ at['rename'] }}))


{% endfor %}
{% for prop, at in struct['properties'].items() %}
{% if at['required'] %}
    @required
{% endif %}
{% if at['readOnly'] %}
    @readonly
{% endif %}
    @property
    def {{ prop }}(self) -> {{ at['type'] }}:
    {% if at['docstring'] %}
        """
        {{ at['docstring'] | indent(width=8) }}
        """
    {% endif %}
    {% if at['deprecated'] %}
        import warnings; warnings.warn('This function is deprecated', DeprecationWarning)
    {% endif %}
    {% if at['defaultValue'] %}
        return self.__data.setdefault('{{ prop }}', {{ at['defaultValue'] }})
    {% else %}
        return self.__data['{{ at['from'] or prop }}']
    {% endif %}


{% if not at['readOnly'] %}
    @{{ prop }}.setter
    def {{ prop }}(self, value: {{ at['type'] }}):
    {% if at['docstring'] %}
        """
        {{ at['docstring'] | indent(width=8) }}
        """
    {% endif %}
    {% if at['deprecated'] %}
        import warnings; warnings.warn('This function is deprecated', DeprecationWarning)
    {% endif %}
        self.__data['{{ at['from'] or prop }}'] = value


{% endif %}
{% endfor %}
{% endfor %}
