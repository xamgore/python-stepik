# This file is generated
from typing import List, Iterable, Any

from errors import StepikError
from common import required, readonly
from resources_list import ResourcesList
{% for model_name, py_module_name in imports.items() if model_name not in models %}
from {{ py_module_name }} import {{ model_name }}
{% endfor %}
{% for model in models.values() %}


class {{ model.id }}:
    _resources_name = '{{ model.schema.resources_name }}'


    def __init__(self, stepik, data):
        from stepik import Stepik
        self._stepik: Stepik = stepik
        self._data = data
        {# self._required = {{ model.required }} #}
        self._check_fields(data)


    def __repr__(self):
        return f'{{ model.id }}(id={self.{{ model.required[0] }}!r})'


    def _check_fields(self, obj):
        # Ensure, all required fields are in the data-object
        if not all(f in obj.keys() for f in self._data):
            raise StepikError('Some fields required by the model {{ model.id }} are missing')


{% for pr in model.resources.values() %}
    @property
    def {{ pr.name }}(self) -> ResourcesList[{{ pr.type }}]:
    {% if pr.docstring %}
        """
        {{ pr.docstring | indent(width=8) }}
        """
    {% endif %}
        return ResourcesList[{{ pr.type }}]\
            ({{ pr.type }}, self._stepik, holder=self, field_with_ids='{{ pr.rename }}')


{% endfor %}
{% for pr in model.methods.values() %}
    def {{ pr.name }}(self) -> {{ pr.type }}:
    {% if pr.docstring %}
        """
        {{ pr.docstring | indent(width=8) }}
        """
    {% endif %}
        return {{ pr.type }}{#
            #}(self._stepik, self._stepik._fetch_object({{ pr.type }}, self.{{ pr.rename }}))


{% endfor %}
{% for pr in model.properties.values() %}
{% if pr.required %}
    @required
{% endif %}{% if pr.readOnly %}
    @readonly
{% endif %}
    @property
    def {{ pr.name }}(self) -> {{ pr.python_type }}:
    {% if pr.docstring %}
        """
        {{ pr.docstring | indent(width=8) }}
        """
    {% endif %}
    {% if pr.deprecated %}
        import warnings; warnings.warn('This function is deprecated', DeprecationWarning)
    {% endif %}
    {% if pr.defaultValue %}
        return self._data.setdefault('{{ pr.name }}', {{ pr.defaultValue }})
    {% else %}
        return self._data['{{ pr.api_name or pr.name }}']
    {% endif %}


{% if not pr.readOnly %}
    @{{ pr.name }}.setter
    def {{ pr.name }}(self, value: {{ pr.python_type }}):
    {% if pr.docstring %}
        """
        {{ pr.docstring | indent(width=8) }}
        """
    {% endif %}
    {% if pr.deprecated %}
        import warnings; warnings.warn('This function is deprecated', DeprecationWarning)
    {% endif %}
        self._data['{{ pr.api_name or pr.name }}'] = value


{% endif %}
{% endfor %}
{% endfor %}
