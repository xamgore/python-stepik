

class ListOf{{ name }}:
    def __init__(self, stepik):
        from stepik import Stepik
        self._stepik: Stepik = stepik

{% if 'GET' in pk_route %}{% set r = pk_route['GET'] %}

    def get(self, {{ r.var }}: {{ r.var_type }}) -> {{ r.model_class_name }}:
        obj = self._stepik._fetch_object({{ r.model_class_name }}, {{ r.var }})
        return {{ r.model_class_name }}(self._stepik, obj)

{% endif %}
{% if 'GET' in base_route %}{% set r = base_route['GET'] %}

    def get_all(self, {{ r.var }}: {{ r.var_type }}, keep_order=False) -> Iterable[{{ r.model_class_name }}]:
        """
        Grab a bunch of ids, usually 20 objects per request.
        """
        if keep_order:
            {{ r.var }} = list({{ r.var }})

        objects = self._stepik._fetch_objects({{ r.model_class_name }}, {{ r.var }})
        iterable = ({{ r.model_class_name }}(self._stepik, o) for o in objects)

        return iterable if not keep_order \
            else sorted(iterable, key=lambda o: ids.index(getattr(o, '{{ r.pk }}')))


    def iterate(self,
                {% for p in r.base_fields %}
                {{ p.name }}: {{ p.python_type }} = None,
                {% endfor %}
                {% for p in r.ordering_fields %}
                by_{{ p }}: bool = None,
                {% endfor %}
                skip: int = 0, limit: Optional[int] = 20) -> Iterable[{{ r.model_class_name }}]:
        """
        There are base fields, like ``language``, that can be used to filter out
        objects. Also there are ordering fields, that starts with ``by_`` prefix.
        They are not used in queries if their value is ``None``. If ``True``
        objects are sorted in straight order, if ``False`` in reversed.
        The sorting is done on the server side, there is no guarantees will it be
        in ascending or descending order.

        ``skip`` parameter means how much objects to skip from the beginning.

        ``limit`` means how much objects to take. It can be set to ``None``,
        all objects will be fetched (not recommended, actually).
        """

        assert skip >= 0, 'skip must be positive'
        assert limit is None or limit >= 0, 'limit must be positive'

        vars = locals().copy()
        args, order = [], []

        for k, v in vars.items():
            is_ordering = k.startswith('by_')
            is_special = k in ['self', 'skip']

            if not v is None and not is_ordering and not is_special:
                args.append((k, v))

            if not v is None and is_ordering:
                sign = '-' if v else ''
                order.append(sign + k[3:])

        from urllib.parse import urlencode
        params = urlencode(args, doseq=True)
        ordering = ','.join(order)

        skip = 0 if skip is None else skip
        page_idx, count = divmod(skip, 20)
        page_idx += 1  # stepik counts from 1

        while True:
            page = self._stepik._get(f'{{ r.resources_plural }}?{params}&page={page_idx}&order={ordering}')

            for obj in page['{{ r.resources_plural }}']:
                if limit and count >= limit:
                    break

                yield {{ r.model_class_name }}(self._stepik, obj)
                count += 1

            if not page['meta']['has_next']:
                break

            page_idx += 1


    def __iter__(self):
        yield from self.iterate(limit=None)

{% endif %}
{% if 'POST' in base_route %}{% set r = base_route['POST'] %}

    def create(self,
               {% for p in r.required %}
               {{ p.name }}: {{ p.python_type or 'str' }},
               {% endfor %}
               {% for p in r.other    %}
               {{ p.name }}: {{ p.python_type or 'str' }} = None,
               {% endfor %}
               **kwargs) -> {{ r.model_class_name }}:
        vars = locals().copy()
        data = {'{{ r.resource }}':
                    {k: v for k, v in {**vars, **kwargs}.items()
                     if k != 'self' and v is not None}}

        response = self._stepik._post('{{ r.resources_plural }}', data)
        if '{{ r.resources_plural }}' not in response:
            raise StepikError(response)

        return {{ r.model_class_name }}(self._stepik, response['{{ r.resources_plural }}'][0])

{% endif %}
{% if 'DELETE' in pk_route %}{% set r = pk_route['DELETE'] %}

    def delete(self, {{ r.var }}: {{ r.var_type }}) -> dict:
        """Delete the object by its {{ r.var }}. Returns the server's response"""
        return self._stepik._delete('{{ r.url }}', {{ r.var }})

{% endif %}
{% if 'PUT' in pk_route %}{% set r = pk_route['PUT'] %}

    def update(self, {{ r.var }}: {{ r.model_class_name }}) -> {{ r.model_class_name }}:
{#               {% for p in r.required %}#}
{#               {{ p.name }}: {{ p.python_type or 'str' }},#}
{#               {% endfor %}#}
{#               {% for p in r.other    %}#}
{#               {{ p.name }}: {{ p.python_type or 'str' }} = None,#}
{#               {% endfor %}#}
{#               **kwargs) -> {{ r.model_class_name }}:#}
        required = {{ r.required }}
        vars = {{ r.var }}._data
        data = {'{{ r.resource }}':
                    {k: v for k, v in vars.items()
                     if k != 'self' and v is not None and k in required }}

        response = self._stepik._put(f'{{ r.resources_plural }}/{ {{ r.var }}.{{ r.pk }} }', data)
        if '{{ r.resources_plural }}' not in response:
            raise StepikError(response)

        return {{ r.model_class_name }}(self._stepik, response['{{ r.resources_plural }}'][0])

{% endif %}
